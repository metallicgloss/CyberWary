# Generated by Django 4.0.2 on 2022-03-22 19:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cyber_wary_portal', '0005_user_accounts'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='scan',
            name='system_services',
        ),
        migrations.CreateModel(
            name='DefenderStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('behavior_monitoring', models.BooleanField(default=False, help_text='The flag associated with status of behaviour monitoring (BehaviorMonitorEnabled).')),
                ('tamper_protection', models.BooleanField(default=False, help_text='The flag associated with status of tamper protection (IsTamperProtected).')),
                ('realtime_protection', models.BooleanField(default=False, help_text='The flag associated with status of realtime protection (RealTimeProtectionEnabled).')),
                ('reboot_required', models.BooleanField(default=False, help_text='The flag associated with the requirement for a restart to implement security updates (RebootRequired).')),
                ('access_protection', models.BooleanField(default=False, help_text='The flag associated with status of account protection (OnAccessProtectionEnabled).')),
                ('download_protection', models.BooleanField(default=False, help_text='The flag associated with status of download scanning (IoavProtectionEnabled).')),
                ('virtual_machine', models.BooleanField(default=False, help_text='The flag associated with the detection of the machine being virtualised by Windows Defender (IsVirtualMachine).')),
                ('full_scan_required', models.BooleanField(default=False, help_text='The flag associated with the requirement for a full scan to be completed (FullScanRequired).')),
                ('full_scan_overdue', models.BooleanField(default=False, help_text='The flag associated with the full scan of a system being overdue and being required to be performed (FullScanOverdue).')),
                ('full_scan_last', models.DateTimeField(help_text='The date/time of the last time that a full scan has been performed on the system (FullScanEndTime).', null=True)),
                ('quick_scan_overdue', models.BooleanField(default=False, help_text='The flag associated with status of a quick scan being marked as overdue (QuickScanOverdue).')),
                ('quick_scan_last', models.DateTimeField(help_text='The date/time of the last time that a quick scan has been performed on the system (QuickScanEndTime).', null=True)),
                ('as_enabled', models.BooleanField(default=False, help_text='The flag associated with status of the Anti-Spyware settings in Windows Defender (AntispywareEnabled).')),
                ('as_signature_update', models.DateTimeField(help_text='The date/time of the last time that the anti-spyware signature set was updated (AntispywareSignatureLastUpdated).', null=True)),
                ('as_signature_version', models.CharField(help_text='The version of the current anti-spyware dataset currently running on the device (AntispywareSignatureVersion).', max_length=16, null=True)),
                ('av_enabled', models.BooleanField(default=False, help_text='The flag associated with status of anti-virus/malware monitoring (AntivirusEnabled).')),
                ('av_signature_update', models.DateTimeField(help_text='The date/time of the last signature update for the antivirus set (AntivirusSignatureLastUpdated).', null=True)),
                ('av_signature_version', models.CharField(help_text='The current version of anti-virus signatures currently running on the device (AntivirusSignatureVersion).', max_length=16, null=True)),
                ('nri_enabled', models.BooleanField(default=False, help_text='The flag associated with status of the network realtime inspection service (NISEnabled).')),
                ('nri_signature_update', models.DateTimeField(help_text='The date/time of the last signature update for the NRI service (NISSignatureLastUpdated).', null=True)),
                ('nri_signature_version', models.CharField(help_text='The current version of the NRI signature set currently running on the device (NISSignatureVersion).', max_length=16, null=True)),
                ('scan_record', models.ForeignKey(help_text='The scan record that the Windows Defender status record is associated with.', on_delete=django.db.models.deletion.CASCADE, to='cyber_wary_portal.scanrecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DefenderPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('check_for_signatures_before_running_scan', models.BooleanField(default=False, help_text='The flag associated with the automated check for signature updates before a scan is performed (CheckForSignaturesBeforeRunningScan).')),
                ('disable_archive_scanning', models.BooleanField(default=False, help_text='The flag to identify if archive (zip, rar, cab) scanning has been disabled (DisableArchiveScanning).')),
                ('disable_auto_exclusions', models.BooleanField(default=False, help_text='The flag to identify if automatic exclusions has been disabled (DisableAutoExclusions).')),
                ('disable_behavior_monitoring', models.BooleanField(default=False, help_text='The flag to identify if behaviour monitoring has been disabled (DisableBehaviorMonitoring).')),
                ('disable_block_at_first_seen', models.BooleanField(default=False, help_text='The flag to identify if the automated blocking at initial occurrence has been disabled (DisableBlockAtFirstSeen).')),
                ('disable_cpu_throttle_on_idle_scans', models.BooleanField(default=False, help_text='The flag to identify if CPU throttling during idle scans has been disabled (DisableCpuThrottleOnIdleScans).')),
                ('disable_datagram_processing', models.BooleanField(default=False, help_text='The flag to identify if UDP inspection has been disabled (DisableDatagramProcessing).')),
                ('disable_dns_over_tcp_parsing', models.BooleanField(default=False, help_text='The flag to identify if DNS over TCP inspection has been disabled (DisableDnsOverTcpParsing).')),
                ('disable_dns_parsing', models.BooleanField(default=False, help_text='The flag to identify if DNS over UDP inspection has been disabled (DisableDnsParsing).')),
                ('disable_email_scanning', models.BooleanField(default=False, help_text='The flag to identify if email (mailbox, mail files) scanning has been disabled (DisableEmailScanning).')),
                ('disable_ftp_parsing', models.BooleanField(default=False, help_text='The flag to identify if FTP inspection has been disabled (DisableFtpParsing).')),
                ('disable_gradual_release', models.BooleanField(default=False, help_text='The flag to identify if the gradual rollout of updates through monthly and daily patches has been disabled (DisableGradualRelease).')),
                ('disable_http_parsing', models.BooleanField(default=False, help_text='The flag to identify if HTTP traffic inspection has been disabled (DisableHttpParsing).')),
                ('disable_inbound_connection_filtering', models.BooleanField(default=False, help_text='The flag to identify if inbound inspections has been disabled (DisableInboundConnectionFiltering).')),
                ('disable_ioav_protection', models.BooleanField(default=False, help_text='The flag to identify if the inspection of all downloaded files and attachments has been disabled (DisableIOAVProtection).')),
                ('disable_privacy_mode', models.BooleanField(default=False, help_text='The flag to identify if privacy mode has been disabled, allowing for threat history to be hidden (DisablePrivacyMode).')),
                ('disable_rdp_parsing', models.BooleanField(default=False, help_text='The flag to identify if RDP traffic inspection has been disabled (DisableRdpParsing).')),
                ('disable_realtime_monitoring', models.BooleanField(default=False, help_text='The flag to identify if realtime monitoring has been disabled (DisableRealtimeMonitoring).')),
                ('disable_removable_drive_scanning', models.BooleanField(default=False, help_text='The flag to identify if scanning external devices (such as USBs) for malware has been disabled (DisableRemovableDriveScanning).')),
                ('disable_restore_point', models.BooleanField(default=False, help_text='The flag to identify if restore points have been disabled (DisableRestorePoint).')),
                ('disable_scanning_mapped_network_drives_for_full_scan', models.BooleanField(default=False, help_text='The flag to identify if the inclusion of mapped network drives in scans has been disabled (DisableScanningMappedNetworkDrivesForFullScan).')),
                ('disable_scanning_network_files', models.BooleanField(default=False, help_text='The flag to identify if the scanning of files on network drives has been disabled (DisableScanningNetworkFiles).')),
                ('disable_script_scanning', models.BooleanField(default=False, help_text='The flag to identify if the scanning of scripts has been disabled (DisableScriptScanning).')),
                ('disable_ssh_parsing', models.BooleanField(default=False, help_text='The flag to identify if SSH traffic inspection has been disabled (DisableSshParsing).')),
                ('disable_tls_parsing', models.BooleanField(default=False, help_text='The flag to identify if TLS traffic inspection been disabled (DisableTlsParsing).')),
                ('controlled_folder_access', models.BooleanField(default=False, help_text='The flag to identify if controlled folder access (ransomware protection) has been enabled (EnableControlledFolderAccess).')),
                ('dns_sinkhole', models.BooleanField(default=False, help_text='The flag to identify if DNS sinkhole on malicous traffic detection has been enabled (EnableDnsSinkhole).')),
                ('file_hash_computation', models.BooleanField(default=False, help_text='The flag to identify if file hash computation has been enabled (EnableFileHashComputation).')),
                ('full_scan_on_battery_power', models.BooleanField(default=False, help_text='The flag to identify if full CPU performance while on battery power has been enabled (EnableFullScanOnBatteryPower).')),
                ('randomize_schedule_task_times', models.BooleanField(default=False, help_text='The flag to identify if scheduled tasks and scans are randomised (RandomizeScheduleTaskTimes).')),
                ('avg_load',models.IntegerField(default=0, help_text='The target average CPU load during a scan (ScanAvgCPULoadFactor).')),
                ('only_if_idle', models.BooleanField(default=False, help_text='The flag to control if a scan only activates while the CPU is idle (ScanOnlyIfIdleEnabled).')),
                ('ui_lockdown', models.BooleanField(default=False, help_text='The flag to state if the UI is locked during a scan (UILockdown).')),
                ('scan_record', models.ForeignKey(help_text='The scan record that the Windows Defender preferences are associated with.', on_delete=django.db.models.deletion.CASCADE, to='cyber_wary_portal.scanrecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DefenderExclusion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('type', models.IntegerField(choices=[(1, 'Extension'), (2, 'Ip Address'), (3, 'Path'), (4, 'Process')], default=1, help_text='The type of exclusion.', validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(1)])),
                ('method', models.IntegerField(choices=[(1, 'Scan'), (2, 'Controlled Access')], default=1, help_text='The method that the exclusion is applied.', validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('value', models.CharField(help_text='The value/contents of the exclusion.', max_length=128, null=True)),
                ('preference', models.ForeignKey(help_text='The set of preferences that the exclusion is associated with.', on_delete=django.db.models.deletion.CASCADE, to='cyber_wary_portal.defenderpreference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DefenderDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('action_success', models.BooleanField(default=False, help_text='The status of the action processing (ActionSuccess).')),
                ('av_version', models.CharField(help_text='The signature version used to detect the incident (AMProductVersion).', max_length=16, null=True)),
                ('reseponse_type', models.IntegerField(default=0, help_text='The type of response that was taken to the threat detection (CleaningActionID).')),
                ('threat_execution_status', models.IntegerField(default=0, help_text='The status of the any outstanding threats (CurrentThreatExecutionStatusID).')),
                ('detection_identifier', models.CharField(help_text='The unique identifier given to the detection (DetectionID).', max_length=48, null=True)),
                ('active_user', models.CharField(help_text='The user currently active at the time of detection (DomainUser).', max_length=48, null=True)),
                ('detection_time', models.DateTimeField(help_text='The date/time of the detection of the threat (InitialDetectionTime).', null=True)),
                ('remediation_time', models.DateTimeField(help_text='The date/time of the resolution of the threat incident (RemediationTime).', null=True)),
                ('last_threat_status_change_time', models.DateTimeField(help_text='The date/time of the last time that the status changed of the threat incident (LastThreatStatusChangeTime).', null=True)),
                ('detection_process', models.CharField(help_text='The process that was involved in detecting the threat (ProcessName).', max_length=64, null=True)),
                ('detected_resources', models.CharField(help_text='The associated files, extensions or resources that are deemed to be a threat (Resources).', max_length=256, null=True)),
                ('scan_record', models.ForeignKey(help_text='The scan record that the Windows Defender detection is associated with.', on_delete=django.db.models.deletion.CASCADE, to='cyber_wary_portal.scanrecord')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
