# Generated by Django 4.0.2 on 2022-03-23 22:00

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cyber_wary_portal', '0009_software'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='scan',
            name='network_adapters',
        ),
        migrations.RemoveField(
            model_name='scan',
            name='network_exposure',
        ),
        migrations.CreateModel(
            name='FirewallRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('rule_id', models.CharField(help_text='The instance ID associated with the firewall rule (ID/InstanceID).', max_length=48, null=True)),
                ('name', models.CharField(help_text='The display name of the firewall rule (DisplayName).', max_length=128, null=True)),
                ('description', models.CharField(help_text='The description given to the rule (Description).', max_length=256, null=True)),
                ('group', models.CharField(help_text='The group that the firewall rule is associated with (Group).', max_length=64, null=True)),
                ('enabled', models.BooleanField(default=False, help_text='The flag to identify if the firewall rule is active and enabled (Enabled).')),
                ('lsm', models.BooleanField(default=False, help_text='The flag to identify if the firewall rule is managed by the Local Session Manager (LSM).')),
                ('direction', models.IntegerField(default=False, help_text='The direction that the rule is targetting (inbound/outbound) (Direction).')),
                ('action', models.IntegerField(default=False, help_text='The configured action to apply to the rule (Action).')),
                ('file_path', models.CharField(help_text='The file path/program that is applied to the rule (Program).', max_length=256, null=True)),
                ('local_address', models.CharField(help_text='The local address that the rule applies to (LocalAddress).', max_length=64, null=True)),
                ('local_ip', models.CharField(help_text='The local numerical IP address that the rule applies to (LocalIP).', max_length=128, null=True)),
                ('local_port', models.IntegerField(default=1, help_text='The local port number that the rule targets (LocalPort).', null=True, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.MinValueValidator(1)])),
                ('remote_address', models.CharField(help_text='The remote address that the rule applies to (RemoteAddress).', max_length=64, null=True)),
                ('remote_ip', models.CharField(help_text='The remote numerical IP address that the rule applies to (RemoteIP).', max_length=128, null=True)),
                ('remote_port', models.IntegerField(default=1, help_text='The remote port number that the rule targets (RemotePort).', null=True, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.MinValueValidator(1)])),
                ('protocol', models.IntegerField(choices=[(1, 'Udp'), (2, 'Tcp')], default=1, help_text='The protocol that the rule targets (Protocol).', validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(1)])),
                ('scan_record', models.ForeignKey(help_text='The scan record that the firewall rule is associated with.', on_delete=django.db.models.deletion.CASCADE, to='cyber_wary_portal.scanrecord')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
